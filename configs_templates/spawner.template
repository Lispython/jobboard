#!/bin/bash

PROJECT_NAME="{{ project_name }}"

PIDFILE="/tmp/${PROJECT_NAME}.pid"
SOCKFILE="/tmp/${PROJECT_NAME}.sock"
LOGPATH="/var/log/uwsgi/${PROJECT_NAME}.log"
WSGIFILE="{{ project_wsgi }}"

USER_GROUP="root:root"

EXEC="{{ project_venv }}/bin/uwsgi"
EXEC_ARGS="--home {{ project_venv }} --socket $SOCKFILE --pythonpath {{ current }} --pidfile $PIDFILE --no-orphans --daemonize $LOGPATH --wsgi-file $WSGIFILE --processes 2 --chmod-socket --master --harakiri 60 --harakiri-verbose --log-slow 30 --log-5xx --memory-report --reload-mercy 8"

usage(){
    echo "$0 {start|stop|restart}"
	echo $EXEC
    exit 1
}


start(){
    echo "Starting $DESC: $PROJECT_NAME"
    touch $PIDFILE
    chown $USER_GROUP $PIDFILE
    if start-stop-daemon --start --quiet --umask 007 --pidfile $PIDFILE --chuid $USER_GROUP --exec $EXEC -- $EXEC_ARGS
    then
        echo "$PROJECT_NAME started"
    else
        echo "Start failed"
    fi
}


stop(){
	echo "Stopping $DESC: $PROJECT_NAME"
    if [ -f $PIDFILE ]
    then
        echo "$PIDFILE exists, process is already running or crashed"
		PID=$(cat $PIDFILE)
		if start-stop-daemon --stop --retry 10 --quiet --oknodo --pidfile $PIDFILE --exec $EXEC
		then
			echo "$PROJECT_NAME stoped"
		else
			echo "Stop failed"
		fi
        while [ -x /proc/${PIDFILE} ]
        do
            echo "Waiting for  to shutdown ..."
            sleep 1
        done

		rm -f $PIDFILE
		rm -f $SOCKFILE
    else
        echo "$PROJECT_NAME is not running ..."
    fi
}

restart(){
	echo "Restarting: $PROJECT_NAME"
	${0} stop
	${0} start
}

status(){
	echo "Status: $PROJECT_NAME"
    if [ -f $PIDFILE ]
    then
        echo "$PIDFILE exists, process is already running or crashed\n"
    else
        echo "$PROJECT_NAME is not running ..."
    fi
}

case $1 in
    "start") start;;

    "stop") stop;;

    "restart") restart;;

    "status") status;;

    *) usage;;

esac